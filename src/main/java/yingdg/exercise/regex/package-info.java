/**
 * Created by yingdg on 2017/8/9.
 */
package yingdg.exercise.regex;

/*
正则表达式
作用：定位字符串中的特定位置

一、普通字符：字母，数字，汉字，下划线，无转义标点符号
        元字符（边界条件）：
                       ^匹配行或者字符串的起始位置，有时还会匹配整个文档的起始位置
                       $匹配行或字符串的结尾
                       \b匹配一个单词边界

二、转义字符：\n,\t,\\,\^,\$,\.,\c,\),\{,\},\?,\+,\*,\|,\{,\}

三、标准字符集合（大写表示反向匹配）
        \d:0-9任意数字
        \w:A-Z,a-z,0-9,_任一字符或汉字
        \s:空格符，制表符，换行符等任一个键盘符
        .:任一字符（转义符待考证）

四、自定义字符集合
        [表达式]:匹配括号中任一字符
        [^表达式]:匹配括号中之外字符
        [字符1-字符2]:匹配1到2之间的任一字符
        [^ 字符1-字符2 数字3-数字4]:匹配不是1到2，3到4的任一字符

五、匹配次数
        {n}:匹配n次
        {m,n}:匹配m到n次
        {m,}:至少匹配m次
        ?:匹配0次或1次{0,1}
        +:至少匹配1次{1,}
        *:区配0次以上{0,}

六、模式
        贪婪模式：默认，匹配越多越好
        非贪婪模式：匹配越少越好，格式{}?

七、选择符与分组
        |:匹配左边或右边的表达式
        ():{}前表示一个整体
            区配结果中表示可单独得到的内容
            每对括号分配一个编号，从1起始

八、进阶
        (exp):匹配exp,并捕获文本到自动命名的组里
        (?<name>exp):匹配exp,并捕获文本到名称为name的组里
        (?:exp):匹配exp,不捕获匹配的文本，也不给此分组分配组号

九、零宽断言
        (?=表达式):匹配表达式前面的位置
        (?<=表达式):匹配表达式后面的位置
        (?!表达式):匹配后面跟的不是表达式的位置
        (?<!表达式):匹配前面不是表达式的位置

 */